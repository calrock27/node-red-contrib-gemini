# This workflow publishes the package to NPM when a release is created or manually triggered
# Uses OIDC Trusted Publishing for enhanced security (no long-lived secrets)
#
# Triggers:
# - Release: Create a GitHub release with a semantic version tag (v1.0.2 or 1.0.2)
#   - Automatically bumps version in package.json and publishes
# - Manual: Go to Actions → Publish to NPM → Run workflow
#   - Optionally specify a version (or uses current package.json version)
#   - Check "Skip version bump" checkbox to test without changing version (testing only)
#
# Setup required:
# 1. Go to https://www.npmjs.com/package/node-red-contrib-gemini
# 2. Click Settings → Publishing Access → Add Trusted Publisher
# 3. Configure with:
#    - Provider: GitHub Actions
#    - Repository Owner: calrock27
#    - Repository Name: node-red-contrib-gemini
#    - Workflow Name: npm-publish.yml
# 4. Ensure your NPM account has 2FA enabled

name: Publish to NPM

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 1.0.2) - if not provided, uses current package.json version'
        required: false
        type: string
      skip-version-bump:
        description: 'Skip version bump (for testing only) - does not update package.json'
        required: false
        type: boolean
        default: false

jobs:
  publish-npm:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/

      - name: Extract version
        id: version
        run: |
          # Get version from input (manual trigger) or release tag (release trigger)
          if [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
            echo "Using manually provided version: ${VERSION}"
          elif [ -n "${{ github.event.release.tag_name }}" ]; then
            VERSION="${{ github.event.release.tag_name }}"
            # Remove 'v' prefix if present
            VERSION="${VERSION#v}"
            echo "Using release tag version: ${VERSION}"
          else
            # Fallback: use current package.json version
            VERSION=$(node -p "require('./package.json').version")
            echo "Using package.json version: ${VERSION}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version to publish: ${VERSION}"

      - name: Update package.json version
        if: github.event_name == 'release' || github.event.inputs.skip-version-bump != 'true'
        run: |
          npm version ${{ steps.version.outputs.version }} --no-git-tag-version
          echo "Updated package.json to version ${{ steps.version.outputs.version }}"

      - name: Configure git
        if: github.event_name == 'release' || github.event.inputs.skip-version-bump != 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Commit version change
        if: github.event_name == 'release' || github.event.inputs.skip-version-bump != 'true'
        run: |
          git add package.json
          git commit -m "chore: bump version to ${{ steps.version.outputs.version }}" || echo "No changes to commit"
          git push origin HEAD:${{ github.ref }} || echo "No changes to push"

      - name: Install dependencies
        run: npm install

      - name: Run smoke tests
        run: npm test

      - name: Verify package contents
        run: npm pack --dry-run

      - name: Publish to NPM with provenance
        run: npm publish --provenance --access public
